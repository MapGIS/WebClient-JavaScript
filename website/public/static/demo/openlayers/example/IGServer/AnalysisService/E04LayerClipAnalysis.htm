<!DOCTYPE HTML PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns='http://www.w3.org/1999/xhtml'>

<head>
    <meta http-equiv='Content-Type' content='text/html; charset=utf-8' />
    <title></title>
    <!--当前示例页面样式表引用-->
    <link rel='stylesheet' href='./static/demo/openlayers/example/style.css' />
    <script include='jquery' src='./static/libs/include-lib-local.js'></script>
    <script src='./static/libs/include-openlayers-local.js'></script>
    <script type='text/javascript'>
        var map = null;
        var resultBaseUrl = 'gdbp://MapGisLocal/OpenLayerVecterMap/sfcls/'; //缓存结果图层的基地址
        var resultLayerArr = new Array();

        function init() {
            //初始化地图容器
            map = new ol.Map({
                target: 'mapCon',     //地图容器div的ID
                controls: ol.control.defaults({
                    attributionOptions: ({
                        collapsible: true
                    })
                }),
                view: new ol.View({
                    center: [54.54, 25],  //地图初始中心点
                    maxZoom: 28,     //最大瓦片显示级数
                    minZoom: 1,      //最小瓦片显示级数
                    zoom: 3,         //地图初始显示级数
                    projection: 'EPSG:4326'
                })
            });
            var tdk = '4c27d6e0e8a90715b23a989d42272fd8';   //天地图密钥
            //加载天地图瓦片图层数据
            map.addLayer(new ol.layer.Tile({
                title: '天地图矢量图层',
                source: new ol.source.XYZ({
                    url: 'http://t0.tianditu.com/DataServer?T=vec_w&x={x}&y={y}&l={z}&tk=' + tdk,
                    wrapX: false
                }),
                projection: 'EPSG:4326'
            }));
            map.addLayer(new ol.layer.Tile({
                    title: '天地图矢量注记图层',
                    source: new ol.source.XYZ({
                        url: 'http://t0.tianditu.com/DataServer?T=cva_w&x={x}&y={y}&l={z}&tk=' + tdk,
                        wrapX: false
                    }),
                    projection: 'EPSG:4326'
                })
            );
        }


        function clipByLayer() {
            startPressBar();
            var resultname = resultBaseUrl + 'clipByLayerAnalysisResultLayer' + getCurentTime();
            //实例化ClipByLayer类
            var clipParam = new Zondy.Service.ClipByLayer({
                ip: 'develop.smaryun.com',
                port: '6163',    //访问IGServer的端口号，.net版为6163，Java版为8089,
                //源简单要素类的URL
                srcInfo1: 'gdbp://MapGisLocal/OpenLayerVecterMap/ds/世界地图经纬度/sfcls/世界河流',
                //裁剪框简单要素类的URL
                srcInfo2: 'gdbp://MapGisLocal/OpenLayerVecterMap/ds/世界地图经纬度/sfcls/世界政区',
                //设置结果URL
                desInfo: resultname
            });
            //调用基类的execute方法，执行图层裁剪分析。AnalysisSuccess为结果回调函数
            clipParam.execute(AnalysisSuccess, 'post', false, 'json', () => {
            });
        }

        //分析成功后的回调
        function AnalysisSuccess(data) {
            stopPressBar();
            if (!data.results) {
                alert('裁剪失败，请检查参数！');
            } else {
                if (data.results.length != 0) {
                    var resultLayerUrl = data.results[0].Value || data.results[0].value;
                    //将结果图层添加到地图视图中显示
                    var resultLayer = new Zondy.Map.GdbpLayer('MapGIS IGS BuffAnalyResultLayer', [resultBaseUrl + resultLayerUrl], {
                        ip: 'develop.smaryun.com',
                        port: '6163',    //访问IGServer的端口号，.net版为6163，Java版为8089,
                        isBaseLayer: false
                    });
                    map.addLayer(resultLayer);
                    resultLayerArr.push(resultLayer);
                }
            }
        }

        function deleteAll() {
            while (resultLayerArr.length > 0) {
                map.removeLayer(resultLayerArr.pop());
            }
        }

        function getCurentTime() {
            var now = new Date();
            //获取当前年份
            var year = now.getFullYear();
            //获取当前月份     
            var month = now.getMonth() + 1;
            //获取当前日期   
            var day = now.getDate();
            //获取当前时刻
            var hh = now.getHours();
            //获取当前分钟
            var mm = now.getMinutes();
            //获取当前秒钟
            var ss = now.getSeconds();
            //将当前的日期拼串
            var clock = year + '-';
            if (month < 10)
                clock += '0';
            clock += month + '-';
            if (day < 10)
                clock += '0';
            clock += day + '-';
            if (hh < 10)
                clock += '0';
            clock += hh;
            if (mm < 10) clock += '0';
            clock += mm;
            if (ss < 10) clock += '0';
            clock += ss;
            return (clock);
        }

        /*===========================================进度条===================================================*/
        //停止进度条
        function stopPressBar() {
            document.getElementById('preview').style.display = 'none';
        }

        //开始进度条动画
        function startPressBar() {
            document.getElementById('preview').style.display = 'block';
        }
    </script>
</head>

<body onload='init()'>
<div id='mapCon'>
</div>

<div id='menuContain' class='menuContain'>
    <div id='tool-container'>
        <div id='dataSourceMenuID' class='optmain' status='unactive' onclick="switchMenuStatus(this,'menu1')">
            <span></span><i class='menuGroup'>裁剪分析</i><em></em>
        </div>

    </div>
</div>
<div id='menu1' class='menuStrip' style='display:none'>
    <ul class='menuItems'>
        <li onclick='clipByLayer()'><span class='item1'></span><i>图层裁剪</i>
        </li>
        <li class='divider'></li>
        <li onclick='deleteAll()'><span class='item3'></span><i>清除</i>
        </li>
    </ul>
</div>
<div id='preview'>
    <img src='static/assets/graphic-image/39-1.gif' alt='' /><br />
    <br />
    <span>正在分析，请稍候</span>
</div>
<script>
    function switchMenuStatus(div, menuitemFrameID) {
        var temDivs = document.getElementsByClassName('optmain');
        if (temDivs.length > 0) {
            for (var i = 0; i < temDivs.length; i++) {
                if (temDivs[i] === div) {
                    var status = div.getAttribute('status');
                    if (status == 'unactive') {
                        div.setAttribute('status', 'active');
                        var tem_spans = div.getElementsByTagName('span');
                        var tem_ems = div.getElementsByTagName('em');
                        tem_spans[0].className = 'active';
                        tem_ems[0].className = 'active';

                        //显示菜单项
                        DisplayMenuItem(true, menuitemFrameID);

                    } else {
                        div.setAttribute('status', 'unactive');
                        var tem_spans = div.getElementsByTagName('span');
                        var tem_ems = div.getElementsByTagName('em');
                        tem_spans[0].className = '';
                        tem_ems[0].className = '';

                        //隐藏菜单项
                        DisplayMenuItem(false, menuitemFrameID);
                    }
                } else {
                    var status = temDivs[i].getAttribute('status');
                    if (status == 'active') {
                        temDivs[i].setAttribute('status', 'unactive');
                        var tem_spans = temDivs[i].getElementsByTagName('span');
                        var tem_ems = temDivs[i].getElementsByTagName('em');
                        tem_spans[0].className = '';
                        tem_ems[0].className = '';
                    }
                }
            }
        }
    }

    function DisplayMenuItem(isDisplay, iframeID) {
        var menuItemFrame = document.getElementById(iframeID);
        if (menuItemFrame != null) {
            if (isDisplay) {
                var temDivs = document.getElementsByClassName('menuStrip');
                if (temDivs.length > 0) {
                    for (var i = 0; i < temDivs.length; i++) {
                        if (temDivs[i] != menuItemFrame) {
                            temDivs[i].style.display = 'none';
                        }
                    }
                }
                menuItemFrame.style.display = '';
            } else {
                menuItemFrame.style.display = 'none';
            }
        }
    };
</script>
</body>

</html>